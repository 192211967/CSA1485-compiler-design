//to find the leading terminals.
#include <stdio.h>
#include <string.h>
#define MAX_RULES 50
#define MAX_TERM 50
int num_rules, num_terms;
char rules[MAX_RULES][MAX_TERM];
void find_leading(int rule_index, char leading[MAX_TERM]) 
{
    int i, j;
    char term;
    leading[0] = '\0';
    term = rules[rule_index][3];
    if (term >= 'a' && term <= 'z') 
	{
        leading[0] = term;
        leading[1] = '\0';
    }
    else 
	{
        for (i = 3; i < strlen(rules[rule_index]); i++) 
		{
            if (rules[rule_index][i] == '|') 
			{
                continue;
            }
            if (rules[rule_index][i] >= 'a' && rules[rule_index][i] <= 'z') 
			{
                leading[0] = rules[rule_index][i];
                leading[1] = '\0';
                break;
            }
            if (rules[rule_index][i] >= 'A' && rules[rule_index][i] <= 'Z') 
			{
                find_leading(rules[rule_index][i] - 'A', leading);
                if (leading[0] != '\0' && leading[0] != 'e') 
				{
                    break;
                }
            }
        }
    }
}
int main() 
{
    int i, j;
    char leading[MAX_TERM];

    printf("Enter the number of rules: ");
    scanf("%d", &num_rules);

    printf("Enter the rules:\n");
    for (i = 0; i < num_rules; i++) 
	{
        scanf("%s", rules[i]);
    }
    printf("The leading terminals are:\n");
    for (i = 0; i < num_rules; i++) 
	{
        find_leading(i, leading);
        for (j = 0; j < strlen(leading); j++) 
		{
            if (strchr(leading, leading[j+1]) == NULL && leading[j] != 'e') 
			{
                printf("%c ", leading[j]);
            }
        }
    }
 return 0;
}
